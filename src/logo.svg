import React, { useContext, useEffect, useState } from 'react';
import axios from 'axios';
import { CartContext } from './CartContext';

const ImageGallery = () => {
 onst ImageGallery = () => {
  const [images, setImages] = useState([]);
  const { addToCart, cartItems } = useContext(CartContext);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [searchText, setSearchText] = useState('');
  const [selectedImage, setSelectedImage] = useState(null);
  const [reviewText, setReviewText] = useState('');
  const [rating, setRating] = useState(5);
  const [username, setUsername] = useState('');
  const [userReviewed, setUserReviewed] = useState(false);
  const [hoveredImage, setHoveredImage] = useState(null);

  useEffect(() => {
    const apiKey = 'YOUR_API_KEY';
    const url = 'https://api.pexels.com/v1/search?query=mobile+phone&per_page=45';

    axios
      .get(url, {
        headers: {
          Authorization: apiKey,
        },
      })
      .then((response) => {
        const photos = response.data.photos.map((photo) => ({
          ...photo,
          reviews: [],
          averageRating: 0,
        }));
        setImages(photos);
      })
      .catch((error) => console.error('Error fetching images:', error));
  }, []);

  const handleFilterByCategory = (category) => {
    setSelectedCategory(category);
  };

  const handleSearch = (event) => {
    setSearchText(event.target.value);
  };

  const handleAddReview = () => {
    if (!reviewText || rating === 0 || !username) {
      return; // If review text, rating, or username is empty, do not add the review
    }

    const updatedImages = images.map((image) => {
      if (image.id === selectedImage.id) {
        const updatedReviews = [
          ...image.reviews,
          { id: new Date().getTime(), text: reviewText, rating, username },
        ];
        return { ...image, reviews: updatedReviews, userReviewed: true };
      }
      return image;
    });

    setImages(updatedImages);
    setReviewText('');
    setRating(5);
    setUsername('');
    setUserReviewed(true);
  };

  const handleRemoveReview = (reviewId) => {
    const updatedImages = images.map((image) => {
      if (image.id === selectedImage.id) {
        const updatedReviews = image.reviews.filter((review) => review.id !== reviewId);
        return { ...image, reviews: updatedReviews, userReviewed: false };
      }
      return image;
    });

    setImages(updatedImages);
  };

  const handleImageClick = (image) => {
    setHoveredImage(null); // Reset hover effect when an image is clicked
    setSelectedImage(image);
    setReviewText('');
    setRating(5);
    setUsername('');
    setUserReviewed(image.userReviewed);
  };

  const filteredImages = images.filter(
    (image) =>
      (selectedCategory === 'all' || image.category === selectedCategory) &&
      image.photographer.toLowerCase().includes(searchText.toLowerCase())
  );

  return (
    <div className="container mx-auto mt-8">
     <h2 className="text-3xl font-bold mb-4">Mobile Phones</h2>
      <div className="flex flex-col lg:flex-row justify-between mb-4">
        <div className="mb-2 lg:mb-0">
          <label htmlFor="category" className="mr-2">
            Category:
          </label>
          <select
            name="category"
            id="category"
            className="border rounded px-2 py-1"
            value={selectedCategory}
            onChange={(e) => handleFilterByCategory(e.target.value)}
          >
            <option value="all">All</option>
            <option value="category1">Category 1</option>
            <option value="category2">Category 2</option>
          </select>
        </div>
        <div className="mb-2 lg:mb-0">
          <label htmlFor="search" className="mr-2">
            Search:
          </label>
          <input
            type="text"
            id="search"
            className="border rounded px-2 py-1"
            value={searchText}
            onChange={handleSearch}
          />
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredImages.map((image) => (
          <div
            key={image.id}
            className="rounded-md overflow-hidden transition duration-300 transform hover:scale-105 relative"
            onMouseEnter={() => setHoveredImage(image)}
            onMouseLeave={() => setHoveredImage(null)}
            onClick={() => handleImageClick(image)}
          >
            <img src={image.src.medium} alt={image.photographer} className="h-64 w-full object-cover" />
            {hoveredImage === image && (
              <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 text-white text-center">
                <span className="text-lg font-bold">{image.photographer}</span>
              </div>
            )}
            <div className="p-2">
              {/* ... (existing code) */}
              <button
                onClick={() => handleAddToWishList(image)}
                className="bg-blue-500 text-white px-4 py-2 mt-2"
              >
                Add to Wish List
              </button>
            </div>
          </div>
        ))}
      </div>
      {selectedImage && (
        <div className="fixed top-1 mt-11 left-0 h-80 w-screen flex items-center justify-center bg-gray-800 bg-opacity-50">
          {/* ... (existing code) */}
        </div>
      )}
    </div>
  );
};

export default ImageGallery;
